#include <bits/stdc++.h> 
/*************************************************************
 
    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
       public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) 
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() 
        {
            if (left)
            {
                delete left;
            }
            if (right)
            {
                delete right;
            }
        }
    };

*************************************************************/
int countNodes(BinaryTreeNode<int>* root){
    if(root == NULL){
        return 0;
    }

    int ans = 1 + countNodes(root->left) + countNodes(root->right);
    return ans;
}

bool maxOrder(BinaryTreeNode<int>* root){
    if(root == NULL){
        return true;
    }
    
    if(root->left == NULL && root->right == NULL){
        return true;
    }

    bool left = maxOrder(root->left);
    bool right = maxOrder(root->right);

    if(root->left && root->data < root->left->data){
        return false;
    }

    if(root->right && root->data < root->right->data){
        return false;
    }

    if(root->right && !root->left){
        return false;
    }

    return left && right;
}

bool isCBT(BinaryTreeNode<int>* root, int nodes, int i){
    if(root == NULL){
        return true;
    }

    if(i >= nodes){
        return false;
    }
    else{
        bool left = isCBT(root->left, nodes, 2*i+1);
        bool right = isCBT(root->right, nodes, 2*i+2);

        return (left && right);
    }
}

bool isBinaryHeapTree(BinaryTreeNode<int>* root) 
{
    int index = 0;
    int nodes = countNodes(root);

    return isCBT(root, nodes, index) && maxOrder(root);
}
