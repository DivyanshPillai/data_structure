class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K)  {   
        vector<pair<int, int>> adj[n];
        for(int i = 0; i < flights.size(); i++){
            int u = flights[i][0];
            int v = flights[i][1];
            int wt = flights[i][2];

            adj[u].push_back({v, wt});
        }

        queue <pair<int, pair<int, int>>> pq;
        vector<int> dist(n, 1e9);
        dist[src] = 0;
        pq.push({0, {src, 0}});

        while(!pq.empty()){
            auto it = pq.front();
            int stops = it.first;
            int node = it.second.first;
            int dis = it.second.second;
            pq.pop();

            if(stops > K){
                continue;
            }

            for(auto i : adj[node]){
                int node1 = i.first;
                int wt = i.second;

                if(dist[node1] > dis + wt && stops <= K){
                    dist[node1] = dis + wt;
                    pq.push({stops + 1, {node1, dis + wt}});
                }
            }
        }

        if(dist[dst] == 1e9){
            return -1;
        }
        return dist[dst];
    }
};
