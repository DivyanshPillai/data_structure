#include <unordered_map>
#include <list>
#include <queue>

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	unordered_map<int, list<int>> adj;
	vector<int> parent(n+1);
	vector<int> vis(n+1);
	queue <int> q;
	vector<int> ans;

	for(int i = 0; i < edges.size(); i++){
		int u = edges[i].first;
		int v = edges[i].second;

		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	q.push(s);
	vis[s] = 1;
	parent[s] = -1;

	while(!q.empty()){
		int front = q.front();
		q.pop();

		for(auto neighbour : adj[front]){
			if(!vis[neighbour]){
				vis[neighbour] = 1;
				parent[neighbour] = front;
				q.push(neighbour);
			}
		}
	}

	int currNode = t;
	ans.push_back(t);

	while(currNode != s){
		currNode = parent[currNode];
		ans.push_back(currNode);
	}

	reverse(ans.begin(), ans.end());

	return ans;
}
