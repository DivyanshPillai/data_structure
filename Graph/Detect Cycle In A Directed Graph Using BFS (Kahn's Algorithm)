#include <bits/stdc++.h> 

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {

  unordered_map<int, list<int>> adj;
  vector<int> indegree(n+1);
  vector<int> ans;

  // int count = 0;
  queue<int> q;

  for(int i = 0; i < edges.size(); i++){
    int u = edges[i].first;
    int v = edges[i].second;

    adj[u].push_back(v);
  }

  for(auto i : adj){
    for(auto j : i.second){
      indegree[j]++;
    }
  }

  for(int i = 1; i <= n; i++){
    if(indegree[i] == 0){
      q.push(i);
    }
  }

  while(!q.empty()){
    int temp = q.front();
    q.pop();

    // count++;
    ans.push_back(temp);

    for(auto neighbour : adj[temp]){
      indegree[neighbour]--;
      if(indegree[neighbour] == 0){
        q.push(neighbour);
      }
    }
  }

  // if ans.size() i.e. size of topological sorted array is equal to number of nodes in graph that i.e. the graph consist valid topological sorted array 
  // that means the graph doesn't contain cycle because topological sort only valid for acyclic graph hence return 0 else return 1
  if(ans.size() == n){
    return 0;
  }
  return 1;
}
