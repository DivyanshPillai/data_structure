#include <unordered_map>
#include <queue>
#include <list>

bool dfsDetectCycle(int src, int parent, unordered_map<int, list<int>> &adj, unordered_map<int, bool> &vis){
    vis[src] = 1;

    for(auto adjNode : adj[src]){
        if(!vis[adjNode]){
            if(dfsDetectCycle(adjNode, src, adj, vis)){
                return true;
            }
        }
        else if(adjNode != parent){
            return true;
        }
    }

    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int, bool> vis;
    unordered_map<int, list<int>> adj;
    // vector<int> adj[n+1];
    // int vis[n+1] = {0};
    for(int i = 0; i < m; i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    for(int i = 0; i < n; i++){
        if(!vis[i]){
            if(dfsDetectCycle(i, -1, adj, vis)){
                return "Yes";
            }
        }
    }
    return "No";
}
