#include <stack>

void topoSort(vector<int> adj[], stack <int> &st, int node, vector<int> &vis){
	vis[node] = 1;

	for(auto it : adj[node]){
		if(!vis[it]){
			topoSort(adj, st, it, vis);
		}
	}

	st.push(node);
}

void dfs(vector<int> adj[], vector <int> &vis, int node){
	vis[node] = 1;

	for(auto it : adj[node]){
		if(!vis[it]){
			dfs(adj, vis, it);
		}
	}
}

int stronglyConnectedComponents(int v, vector<vector<int>> &edges)
{
	vector<int> adj[v];
	vector <int> vis(v, 0);
	stack <int> st;

	for(int i = 0; i < edges.size(); i++){
		int u = edges[i][0];
		int v = edges[i][1];

		adj[u].push_back(v);
	}

	// topo sort 
	for(int i = 0; i < v; i++){
		if(!vis[i]){
			topoSort(adj, st, i, vis);
		}
	}

	// transpose the adjacency list
	vector<int> transpose[v];

	for(int i = 0; i < v; i++){
		vis[i] = 0;
		for(auto it : adj[i]){
			transpose[it].push_back(i);
		}
	}

	// perform dfs and count the SCC
	int count = 0;

	while(!st.empty()){
		int node = st.top();
		st.pop();

		if(!vis[node]){
			count++;
			dfs(transpose, vis, node);
		}
	}

	return count;
}
