#include <algorithm>

bool cmp(vector<int> &a, vector<int> &b){
  return a[2] < b[2];
}

void makeSet(vector<int> &parent, vector<int> &rank, int n){
  for(int i = 0; i < n; i++){
    parent[i] = i;
    rank[i] = 0;
  }
}

int findParent(vector<int> &parent, int node){
  if(parent[node] == node){
    return node;
  }

  return parent[node] = findParent(parent, parent[node]);
}

void unionSetBySize(vector<int> &parent, vector<int> &size, int u, int v){
  int pu = findParent(parent, u);
  int pv = findParent(parent, v);

  if(size[pu] < size[pv]){
    parent[pu] = pv;
    size[pv] += size[pu];
  }
  else{
    parent[pv] = pu;
    size[pu] += size[pv];
  }
}

void unionSetByRank(vector<int> &parent, vector<int> &rank, int u, int v){
  // ultimate parent of u and v
  int pu = findParent(parent, u);
  int pv = findParent(parent, v);

  // rank of u and v
  int ru = rank[pu];
  int rv = rank[pv];

  if(ru < rv){
    parent[pu] = pv;
  }
  else if(rv < ru){
    parent[pv] = pu;
  }
  else{
    parent[pv] = pu;
    rank[pu]++;
  }
}

int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
  sort(edges.begin(), edges.end(), cmp);
  vector<int> parent(n);
  vector<int> rank(n);
  makeSet(parent, rank, n);

  int minWeight = 0;

  for(int i = 0; i < edges.size(); i++){
    int u = findParent(parent, edges[i][0]);
    int v = findParent(parent, edges[i][1]);
    int wt = edges[i][2];

    if(u != v){
      minWeight += wt;
      unionSetByRank(parent, rank, u, v);
    }
  }

  return minWeight;
}
