class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<long long, long long>> adj[n];
        for(int i = 0; i < roads.size(); i++){
            int u = roads[i][0];
            int v = roads[i][1];
            int wt = roads[i][2];

            adj[u].push_back({v, wt});
            adj[v].push_back({u, wt});
        }

        priority_queue <pair<long long, long long>,vector<pair<long long, long long>>, greater<pair<long long, long long>>> pq;
        vector<long long> dist(n, LONG_MAX);
        vector<long long> ways(n, 0);

        // {dist, node}
        pq.push({0, 0});
        dist[0] = 0;
        ways[0] = 1;
        int mod = 1e9 + 7;

        while(!pq.empty()){
            auto it = pq.top();
            long long dis = it.first;
            long long node = it.second;
            pq.pop();

            for(auto i : adj[node]){
                long long adjNode = i.first;
                long long wt = i.second;

                if(dist[adjNode] > dis + wt){
                    dist[adjNode] = dis + wt;
                    pq.push({dist[adjNode], adjNode});
                    ways[adjNode] = ways[node];
                }
                else if(dist[adjNode] == dis + wt){
                    ways[adjNode] = (ways[node] + ways[adjNode]) % mod;
                }
            }
        }
        return ways[n-1] % mod;
    }
};
