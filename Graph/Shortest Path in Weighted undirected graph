class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        vector<vector<pair<int,int>>>adj(n+1);
        
        for(int i = 0; i < m; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            
            adj[u].push_back({v, wt});
            adj[v].push_back({u, wt});
        }
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> dist(n+1, 1e9);
        vector<int> parent(n+1);
        
        for(int i = 1; i <= n; i++){
            parent[i] = i;
        }
        
        pq.push({0, 1});
        dist[1] = 0;
        
        while(!pq.empty()){
            auto it = pq.top();
            int dis = it.first;
            int node = it.second;
            pq.pop();
            
            for(auto it : adj[node]){
                int node1 = it.first;
                int wt = it.second;
                if(dist[node1] > wt + dis){
                    dist[node1] = wt + dis;
                    pq.push({wt+dis, node1});
                    parent[node1] = node;
                }
            }
        }
        
        if(dist[n] == 1e9){
            return {-1};
        }
            
        
        vector<int> ans;
        int node = n;
        ans.push_back(dist[n]);
        while(parent[node] != node){
            ans.push_back(node);
            node = parent[node];
        }
        ans.push_back(1);
        reverse(ans.begin()+1, ans.end());
        return ans;
    }
};
