class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n = heights.size();
        int m = heights[0].size();

        priority_queue <pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, 
        greater <pair<int, pair<int, int>>>> pq;
        vector<vector<int>> dist(n, vector<int>(m, 1e9));
        int delr[] = {-1, 0, 1, 0};
        int delc[] = {0, 1, 0, -1};
        dist[0][0] = 0;
        pq.push({0, {0, 0}});

        while(!pq.empty()){
            auto it = pq.top();
            int diff = it.first;
            int row = it.second.first;
            int col = it.second.second;
            pq.pop();

            for(int i = 0; i < 4; i++){
                int newr = row + delr[i];
                int newc = col + delc[i];

                if(newr >= 0 && newr < n && newc >= 0 && newc < m){
                    int newEffort = max(abs(heights[row][col] - heights[newr][newc]), diff);
                    if(newEffort < dist[newr][newc]){
                        dist[newr][newc] = newEffort;
                        pq.push({newEffort, {newr, newc}});
                    }
                }
            }

            if(row == n-1 && col == m-1){
                return diff;
            }
        }

        return -1;
    }
};
