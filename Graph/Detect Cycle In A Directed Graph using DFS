#include <unordered_map>
#include <list>

bool dfsCheck(unordered_map<int, list<int>> &adj, unordered_map<int, bool> &vis, unordered_map<int, bool> &pathVis, int src){
  vis[src] = 1;
  pathVis[src] = 1;

  for(auto it : adj[src]){
    if(!vis[it]){
      if(dfsCheck(adj, vis, pathVis, it))
        return true;
    }
    else if(pathVis[it]){
      return true;
    }
  }

  pathVis[src] = 0;
  return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  unordered_map<int, list<int>> adj;
  unordered_map<int, bool> vis;
  unordered_map<int, bool> pathVis;

  for(int i = 0; i < edges.size(); i++){
    int u = edges[i].first;
    int v = edges[i].second;

    adj[u].push_back(v);
  }

  for(int i = 0; i < n; i++){
    if(!vis[i]){
      if(dfsCheck(adj, vis, pathVis, i))
        return 1;
    }
  }

  return 0;
}
