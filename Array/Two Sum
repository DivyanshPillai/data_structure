// One way of using hashing
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map <int, int> mp;
        vector<int> ans(2);

        for(int i = 0; i < nums.size(); i++){
            mp[nums[i]] = i;
        }

        for(int i = 0; i < nums.size(); i++){
            int diff = target - nums[i];
            if(mp.count(diff) && mp[diff] != i){
                ans = {i, mp[diff]};
            }
        }
        return ans;
    }
};

// Another way of using hasing
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map <int, int> mp;
        vector<int> ans(2);

        for(int i = 0; i < nums.size(); i++){
            int diff = target - nums[i];
            if(mp.find(diff) != mp.end()){
                ans = {i, mp[diff]};
            }
            mp[nums[i]] = i;
        }
        return ans;
    }
};
