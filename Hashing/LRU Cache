class LRUCache {
public:
    class node{
        public:
        int key;
        int val;
        node* next;
        node* prev;

        node(int key1, int val1){
            key = key1;
            val = val1;
        }
    };

    node* head = new node(-1, -1);
    node* tail = new node(-1, -1);

    int cap = 0;
    unordered_map <int, node*> mp;

    LRUCache(int capacity) {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
    }

    void addNode(node* newNode){
        node* temp = head->next;
        head->next = newNode;
        newNode->next = temp;
        temp->prev = newNode;
        newNode->prev = head;
    }

    void deleteNode(node* delNode){
        node* delPrev = delNode->prev;
        node* delNext = delNode->next;
        delPrev->next = delNext;
        delNext->prev = delPrev;
    }
    
    int get(int key) {
        if(mp.find(key) != mp.end()){
            node* ansNode = mp[key];
            int ans = ansNode->val;
            deleteNode(ansNode);
            mp.erase(key);
            addNode(ansNode);
            mp[key] = head->next;
            return ans;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key) != mp.end()){
            node* oriNode = mp[key];
            mp.erase(key);
            deleteNode(oriNode);
        }
        if(mp.size() == cap){
            mp.erase(tail->prev->key);
            deleteNode(tail->prev);
        }

        addNode(new node(key, value));
        mp[key] = head->next;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
